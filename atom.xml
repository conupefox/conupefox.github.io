<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>D2O | 重水</title>
  
  <subtitle>恭喜您发现本站!</subtitle>
  <link href="http://blog.d2okkk.net/atom.xml" rel="self"/>
  
  <link href="http://blog.d2okkk.net/"/>
  <updated>2022-01-05T02:51:32.288Z</updated>
  <id>http://blog.d2okkk.net/</id>
  
  <author>
    <name>D2O</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录一下配置Asterisk踩的坑</title>
    <link href="http://blog.d2okkk.net/202201/asterisk/"/>
    <id>http://blog.d2okkk.net/202201/asterisk/</id>
    <published>2022-01-05T01:45:00.000Z</published>
    <updated>2022-01-05T02:51:32.288Z</updated>
    
    <content type="html"><![CDATA[<p>1.在国内自建 stun，这个比较简单的，用 coturn 建一个就行了。openwrt 下可以用restund，但是我还没解决动态 ip 怎么更新的问题，所以暂时是在固定 ip 的云主机上用 coturn 搭建。<br>2.用标准5060端口，实测发现在非标准端口下 linphone 发包的时候没有携带端口号，导致45秒断线，其他客户端暂未发现此问题，推测是 linphone 客户端的问题。非标端口做了 srv 记录也是一样。<br>3.asterisk 位于路由器后面时，路由器端口映射5060和 rtp 端口。<br>asterisk 本机 hostname 要改成 sip 域名，并添加 hosts  sip 域名只向本机私网 ip。<br>在 sip.conf 里面要配置localnet=x.x.x.x/255.255.255.0 ;Zero conf local network，否则会有30秒断线问题。</p><p>参考：<a href="https://stackoverflow.com/questions/23050268/asterisk-call-drop-after-30-seconds">Asterisk call drop after 30 seconds - Stack Overflow</a></p><p>4.linphone 客户端开启推送通知后 sip Contact 字段包含 token 信息长度超255字节，会被asterisk 丢弃溢出部分，导致接听32秒断线。对于自建 asterisk 需要取消推送通知选项。对于 linphone 官方服务可以开启。</p><p>参考：<a href="https://github.com/BelledonneCommunications/linphone-android/issues/265">infamous 30 or 33 second call disconnect of incoming calls - linphone · Issue #265 · BelledonneCommunications/linphone-android · GitHub</a><br>5.sip.conf 配置(rtp直通、nat穿透、拨打外域部分)  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tlsdontverifyserver&#x3D;yes  </span><br><span class="line">srvlookup&#x3D;yes  </span><br><span class="line">media_address&#x3D;ddns.domain.net  </span><br><span class="line">externhost&#x3D;ddns.domain.net  </span><br><span class="line">localnet&#x3D;x.x.x.x&#x2F;255.255.255.0 ; lan subnet  </span><br><span class="line">directmedia&#x3D;update  </span><br><span class="line">directrtpsetup&#x3D;yes  </span><br><span class="line">icesupport&#x3D;yes</span><br></pre></td></tr></table></figure><p>6.安卓自带 sip 客户端 在离开 WiFi 范围网络失效，自动切换到数据，或者反过来切换的时候，不会重新连接sip服务器注册，只有手动切换数据 WiFi 的时候会主动重新注册。</p><p>如果 sip 服务器用的是双栈网络，在数据网络用了 ipv6，即使手动切换到 WiFi 也会用 ipv6 进行连接。</p><p>如果 WiFi 没有 ipv6 会注册失败。为此我的 sip 服务器只绑定了 ipv4。动态 ip 更换 ip 之后安卓自带 sip 客户端不会重新解析域名，需要手动切一下数据 WiFi 激活注册。</p><p>总结一下就是安卓自带 sip 客户端是个半成品，不实用。</p><p>7.关于 chan-dongle</p><p>openwrt-19.07.8 自带 chan-dongle 版本太旧，可以正常使用不支持长短信。</p><p>openwrt-21.02.1 自带 chan-dongle 版本，棒子初始化不正常（mt7620平台，E1750棒子）。</p><p>支持长短信、openwrt_sdk 编译通过、棒子初始化正常，所有功能都可以使用的版本。</p><p><a href="https://github.com/wdoekes/asterisk-chan-dongle/commit/ca9b69276738af1d571ec120e103d317701760c2">fix Cannot parse UCS-2 error (#131) · wdoekes/asterisk-chan-dongle@ca9b692 · GitHub</a></p><p>openwrt-19.07 Makefile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PKG_SOURCE_VERSION:&#x3D;ca9b69276738af1d571ec120e103d317701760c2</span><br><span class="line">PKG_SOURCE_DATE&#x3D;2021-04-19</span><br><span class="line">PKG_RELEASE:&#x3D;1</span><br><span class="line">PKG_MIRROR_HASH:&#x3D;skip</span><br></pre></td></tr></table></figure><p>8.openwrt-19.07.8 官方编译的 asterisk-16.22.0  有闪退问题(mt7620平台)</p><p>使用 sdk 编译回退到 asterisk-16.10 正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src-git telephony [https:&#x2F;&#x2F;git.openwrt.org&#x2F;feed&#x2F;telephony.git^edbeb1b9a30153b06cbb8120cdd718e1ac0ba7d2](https:&#x2F;&#x2F;git.openwrt.org&#x2F;feed&#x2F;telephony.git%5Eedbeb1b9a30153b06cbb8120cdd718e1ac0ba7d2)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.在国内自建 stun，这个比较简单的，用 coturn 建一个就行了。openwrt 下可以用restund，但是我还没解决动态 ip 怎么更新的问题，所以暂时是在固定 ip 的云主机上用 coturn 搭建。&lt;br&gt;2.用标准5060端口，实测发现在非标准端口下 li</summary>
      
    
    
    
    <category term="系统" scheme="http://blog.d2okkk.net/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="asterisk" scheme="http://blog.d2okkk.net/tags/asterisk/"/>
    
    <category term="chan_dongle" scheme="http://blog.d2okkk.net/tags/chan-dongle/"/>
    
    <category term="openwrt" scheme="http://blog.d2okkk.net/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>All in one小主机重装实录--DSM 6.2.3</title>
    <link href="http://blog.d2okkk.net/202105/j1800_setup_3/"/>
    <id>http://blog.d2okkk.net/202105/j1800_setup_3/</id>
    <published>2021-05-04T14:57:00.000Z</published>
    <updated>2021-04-29T13:57:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>本文主要介绍在Proxmox VE 6.3上导入XPEnology Loder 、注入<code>virtio</code>网卡驱动并安装DSM 6.2.3系统。</p><a id="more"></a><h3 id="导入虚拟机模板"><a href="#导入虚拟机模板" class="headerlink" title="导入虚拟机模板"></a>导入虚拟机模板</h3><p><a href="https://xpenology.com/forum/topic/13887-dsm-6x-proxmox-backup-template/">这里</a> 下载虚拟机模板，<del>这个也是我放弃之前的Ubuntu Server 20.04转投PVE的重要原因</del>，真实原因是之前一直没搞定Debian的kodi显卡硬件解码才被迫用的Ubuntu 。</p><p>下载回来的模板上传到PVE的<code>/var/lib/vz/dump</code>目录里面，在web界面–local存储–备份里面就能找到，恢复出来的时候需要收到选择恢复到哪个存储池，否则就会按照模板里面的路径来回恢复。</p><h3 id="修改SN号和MAC、隐藏50M引导磁盘"><a href="#修改SN号和MAC、隐藏50M引导磁盘" class="headerlink" title="修改SN号和MAC、隐藏50M引导磁盘"></a>修改SN号和MAC、隐藏50M引导磁盘</h3><p>把模板恢复出来之后先别急着开机，还需要修改sn和mac地址。</p><p>我这里导入后的VM ID是102，挂载50M那个XPEnology Loder盘的第一个分区，编辑<code>grub/grub.cfg</code></p><p>修改sn和mac地址，修改SataPortMap。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;var&#x2F;lib&#x2F;vz&#x2F;images&#x2F;102&#x2F;</span><br><span class="line">mkdir synoboot_mount</span><br><span class="line">mount -o loop,rw,offset&#x3D;$((2048*512)) vm-102-disk-0.raw synoboot_mount</span><br><span class="line">vi synoboot_mount&#x2F;grub&#x2F;grub.cfg</span><br><span class="line">set sn&#x3D;xxxx</span><br><span class="line">set mac1&#x3D;xxxx</span><br><span class="line"># 分配5个sata口给dsm系统</span><br><span class="line">set sata_args&#x3D;&#39;SataPortMap&#x3D;5&#39;</span><br><span class="line"></span><br><span class="line"># unmount it after editing</span><br><span class="line">umount &#x2F;var&#x2F;lib&#x2F;vz&#x2F;images&#x2F;102&#x2F;synoboot_mount</span><br></pre></td></tr></table></figure><p>回到web界面，把50M引导磁盘从sata0改挂到sata5。sata5对于虚拟机内部就是第6个sata口。由于设置了SataPortMap=5，只分配5个sata口给dsm系统，所以第6个sata口在dsm内就不可见了。</p><p>改好设置之后，每次都需要从第三项 <code>DS918+ VMWare/ESXI with Jun&#39;s Mod v1.04b</code> 启动，只要第一次选过以后都会记忆上一次的结果。</p><h3 id="注入virtio网卡驱动"><a href="#注入virtio网卡驱动" class="headerlink" title="注入virtio网卡驱动"></a>注入virtio网卡驱动</h3><p>1.04b版本的loader默认只有<code>e1000</code>和<code>vmxnet3</code>网卡的驱动，这2种网卡在kvm虚拟机下效能低下，要改为<code>virtio</code>网卡。</p><p>XPEnology论坛有位IG-88大佬发布了<a href="https://xpenology.com/forum/topic/28321-driver-extension-jun-103b104b-for-dsm623-for-918-3615xs-3617xs/">扩展驱动包</a>，包含了很多硬件的驱动，其中就包含了<code>virtio</code>。</p><p>这个<code>virtio</code>的驱动程序是从群晖官方Virtual DSM内提取的，但是由于一直没有确认驱动是否稳定，IG-88大佬只是把驱动放在扩展包中并没有激活使用，所以直接使用扩展包也是无法驱动<code>virtio</code>网卡。</p><p>从目前论坛的报告状态来看，至少virtio_net在虚拟机中是可以稳定运行。</p><p>我自己也测试过硬盘用virtio_blocks是无法识别硬盘的，virtio_net可以正常识别网卡。</p><p>接下来就是把驱动注入到Loader里面，既然都要手动打包驱动了，那就没必要使用扩展驱动包把不用的驱动打包进内核。</p><p>我这里是直接把原版Loader的<code>extra2.lzma</code>解开，只增加<code>virtio</code>的网卡驱动。关于<code>extra.lzma</code>和<code>extra2.lzma</code>这2文件有什么区别，一直没搞明白。按照大部分的教程都是修改<code>extra.lzma</code>，我改了一天一直没有效果。后来用相同方法修改<code>extra2.lzma</code>成功了。</p><p>解开扩展驱动包的<code>extra2.lzma</code>在压缩包里面提取<code>virtio</code> <code>virtio_ring</code> <code>virtio_pci</code> <code>virtio_net</code>四个.ko文件.</p><p>挂载原版loader的第二个分区，然后把里面的<code>extra2.lzma</code>解开。</p><p>往里面的<code>usr/lib/modules/</code>添加刚刚提取的四个.ko文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;var&#x2F;lib&#x2F;vz&#x2F;images&#x2F;102&#x2F;</span><br><span class="line">mkdir synoboot_mount</span><br><span class="line">mount -o loop,rw,offset&#x3D;$((32768*512)) vm-102-disk-0.raw synoboot_mount</span><br><span class="line">mkdir ex2</span><br><span class="line">mv .&#x2F;synoboot_mount&#x2F;extra2.lzma .&#x2F;ex2&#x2F;</span><br><span class="line">cd .&#x2F;ex2</span><br><span class="line">lzma -d extra2.lzma</span><br><span class="line">cpio -idv &lt; extra2</span><br><span class="line">rm extra2</span><br><span class="line">root@pve:&#x2F;var&#x2F;lib&#x2F;vz&#x2F;images&#x2F;102&#x2F;ex2&#x2F;usr&#x2F;lib&#x2F;modules# ls -l | grep virtio</span><br><span class="line">#在这个目录下放入4个.ko</span><br><span class="line">-rw-r--r-- 1 root root   12832 Apr 27 19:58 virtio.ko</span><br><span class="line">-rw-r--r-- 1 root root   39192 Apr 27 19:58 virtio_net.ko</span><br><span class="line">-rw-r--r-- 1 root root   28448 Apr 27 20:04 virtio_pci.ko</span><br><span class="line">-rw-r--r-- 1 root root   13952 Apr 27 20:04 virtio_ring.ko</span><br></pre></td></tr></table></figure><p>编辑<code>etc/rc.modules </code>找到<code>EXTRA_MODULES=</code>后面加入4个virtio。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXTRA_MODULES&#x3D;&quot;mii mdio libphy atl1 atl1e atl1c alx uio ipg jme skge sky2 ptp_pch pch_gbe qla3xxx qlcnic qlge netxen_nic sfc e1000 pcnet32 vmxnet3 bnx2 libcrc32c bnx2x cnic e1000e igb ixgbe r8168 tg3 usbnet ax88179_178a button evdev virtio virtio_ring virtio_pci virtio_net&quot;</span><br></pre></td></tr></table></figure><p>重新打包<code>extra2.lzma</code>，放回30M的分区。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;var&#x2F;lib&#x2F;vz&#x2F;images&#x2F;102&#x2F;ex2</span><br><span class="line">(find . -name modprobe &amp;&amp; find . \! -name modprobe) | cpio --owner root:root -oH newc | lzma -8 &gt; ..&#x2F;extra2.lzma</span><br><span class="line">cd ..&#x2F;</span><br><span class="line">mv .&#x2F;extra2.lzma .&#x2F;synoboot_mount&#x2F;</span><br><span class="line">###Unmount it after editing</span><br><span class="line">umount synoboot_mount</span><br></pre></td></tr></table></figure><h3 id="虚拟机硬件配置"><a href="#虚拟机硬件配置" class="headerlink" title="虚拟机硬件配置"></a>虚拟机硬件配置</h3><p>直通硬盘，一句话搞定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qm set 102 -sata2 &#x2F;dev&#x2F;disk&#x2F;by-id&#x2F;ata-ST500LM012_HN-M500MBB_S2Y6J9BD406715</span><br></pre></td></tr></table></figure><p>回到PVE的Web界面，修改虚拟机的网卡类型为<code>virtio</code>，并修改好MAC地址。添加一个串行端口(serial0)用于查看Loader的输出。</p><p>最后开启虚拟机，如无意外很快就能在群晖助手中找到已经安装好DSM系统的主机了。</p><p>Enjoy ！！</p><p>参考：</p><ul><li><a href="https://xpenology.com/forum/topic/12952-dsm-62-loader/page/5/?tab=comments#comment-93988">https://xpenology.com/forum/topic/12952-dsm-62-loader/page/5/?tab=comments#comment-93988</a></li><li><a href="https://xpenology.com/forum/topic/13887-dsm-6x-proxmox-backup-template/">https://xpenology.com/forum/topic/13887-dsm-6x-proxmox-backup-template/</a></li><li><a href="https://xpenology.com/forum/topic/13451-any-way-to-hide-50mb-synoboot-disk-from-storage-manager-in-vm/">https://xpenology.com/forum/topic/13451-any-way-to-hide-50mb-synoboot-disk-from-storage-manager-in-vm/</a></li><li><a href="https://xpenology.com/forum/topic/28321-driver-extension-jun-103b104b-for-dsm623-for-918-3615xs-3617xs/page/28/">https://xpenology.com/forum/topic/28321-driver-extension-jun-103b104b-for-dsm623-for-918-3615xs-3617xs/page/28/</a></li><li><a href="https://xpenology.com/forum/topic/7187-how-to-build-and-inject-missing-drivers-in-jun-loader-102a/">https://xpenology.com/forum/topic/7187-how-to-build-and-inject-missing-drivers-in-jun-loader-102a/</a></li><li><a href="https://koolshare.cn/forum.php?mod=viewthread&amp;tid=163584&amp;page=1&amp;authorid=234544">https://koolshare.cn/forum.php?mod=viewthread&amp;tid=163584&amp;page=1&amp;authorid=234544</a></li><li><a href="https://www.10bests.com/dsm-hdd-hibernation-on-pve/">https://www.10bests.com/dsm-hdd-hibernation-on-pve/</a></li><li><a href="https://post.smzdm.com/p/alpzllno/">https://post.smzdm.com/p/alpzllno/</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;本文主要介绍在Proxmox VE 6.3上导入XPEnology Loder 、注入&lt;code&gt;virtio&lt;/code&gt;网卡驱动并安装DSM 6.2.3系统。&lt;/p&gt;</summary>
    
    
    
    <category term="Home Lab" scheme="http://blog.d2okkk.net/categories/Home-Lab/"/>
    
    
    <category term="proxmox ve" scheme="http://blog.d2okkk.net/tags/proxmox-ve/"/>
    
    <category term="pve" scheme="http://blog.d2okkk.net/tags/pve/"/>
    
    <category term="XPEnology" scheme="http://blog.d2okkk.net/tags/XPEnology/"/>
    
    <category term="群晖" scheme="http://blog.d2okkk.net/tags/%E7%BE%A4%E6%99%96/"/>
    
    <category term="dsm" scheme="http://blog.d2okkk.net/tags/dsm/"/>
    
  </entry>
  
  <entry>
    <title>All in one小主机--Debian下安装kodi</title>
    <link href="http://blog.d2okkk.net/202104/j1800_setup_2/"/>
    <id>http://blog.d2okkk.net/202104/j1800_setup_2/</id>
    <published>2021-04-29T13:24:57.000Z</published>
    <updated>2021-05-10T01:00:50.289Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>kodi官方的版本只支持Ubuntu，之前用Debian仓库的版本又不能硬件解码。时隔1年kodi发布了19版本，我也找到了在Debian下真正好用的kodi了。</p><p>果断抛弃了Ubuntu Server 转投PVE的怀抱。虚拟机才是All in one最终的归宿。</p><a id="more"></a><h3 id="安装kodi"><a href="#安装kodi" class="headerlink" title="安装kodi"></a>安装kodi</h3><p><a href="https://github.com/basilgello/kodi-nightly-debian-repo">这里</a> 是一位外国友人维护的Kodi from Debian - Nightly Repository。基本上安装上面的步骤走就可以了。</p><p>在PVE系统里面，直接是root登录，所以就不需要用sudo。</p><ul><li>Install Vasyl Gello’s signing key:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install ca-certificates curl gnupg sudo</span><br><span class="line">curl &#39;https:&#x2F;&#x2F;basilgello.github.io&#x2F;kodi-nightly-debian-repo&#x2F;repository-key.asc&#39; | apt-key add -</span><br></pre></td></tr></table></figure><p><code>buster-backports</code>源之前已经添加过了，不需要重复添加。</p><ul><li><p><del>Add ‘buster-backports’ repositories to APT configuration:</del></p></li><li><p>Add the repository to APT configuration:</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb https:&#x2F;&#x2F;basilgello.github.io&#x2F;kodi-nightly-debian-repo buster-backports main&quot; | tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;kodi-nightly-debian-repo.list</span><br></pre></td></tr></table></figure><ul><li>Pin Kodi to the unofficial repository to ensure automatic updates:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;Package: *&#39; | sudo tee &#x2F;etc&#x2F;apt&#x2F;preferences.d&#x2F;01kodi-nightly-debian-repo</span><br><span class="line">echo &#39;Pin: release l&#x3D;kodi-nightly-debian-repo&#39; | sudo tee -a &#x2F;etc&#x2F;apt&#x2F;preferences.d&#x2F;01kodi-nightly-debian-repo</span><br><span class="line">echo &#39;Pin-Priority: 1&#39; | sudo tee -a &#x2F;etc&#x2F;apt&#x2F;preferences.d&#x2F;01kodi-nightly-debian-repo</span><br><span class="line">echo &#39;&#39; | sudo tee -a &#x2F;etc&#x2F;apt&#x2F;preferences.d&#x2F;01kodi-nightly-debian-repo</span><br><span class="line">echo &#39;Package: kodi*&#39; | sudo tee -a &#x2F;etc&#x2F;apt&#x2F;preferences.d&#x2F;01kodi-nightly-debian-repo</span><br><span class="line">echo &#39;Pin: release l&#x3D;kodi-nightly-debian-repo&#39; | sudo tee -a &#x2F;etc&#x2F;apt&#x2F;preferences.d&#x2F;01kodi-nightly-debian-repo</span><br><span class="line">echo &#39;Pin-Priority: 500&#39; | sudo tee -a &#x2F;etc&#x2F;apt&#x2F;preferences.d&#x2F;01kodi-nightly-debian-repo</span><br></pre></td></tr></table></figure><ul><li>Update the package lists and install Kodi:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install --install-recommends -t buster-backports kodi kodi-pvr-iptvsimple</span><br></pre></td></tr></table></figure><h3 id="安装kodi为服务"><a href="#安装kodi为服务" class="headerlink" title="安装kodi为服务"></a>安装kodi为服务</h3><p>和Ubuntu Server一样，安装驱动、x框架等kodi的依赖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install ssh software-properties-common xorg xserver-xorg-legacy \</span><br><span class="line">alsa-utils mesa-utils git-core librtmp1 libmad0 lm-sensors libmpeg2-4 \</span><br><span class="line">avahi-daemon libva2 vainfo i965-va-driver dbus-x11 samba \</span><br><span class="line">pastebinit xserver-xorg-video-intel</span><br><span class="line">apt-get upgrade</span><br></pre></td></tr></table></figure><p>编辑/etc/X11/Xwrapper.config 允许anybody启动Xserver，值得注意的是，在Debian里面还需要<code>needs_root_rights=yes</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">allowed_users&#x3D;anybody</span><br><span class="line">needs_root_rights&#x3D;yes</span><br></pre></td></tr></table></figure><p>后面就和Ubuntu Server的步骤是一样的。</p><p>添加kodi为服务，实现开机启动。编辑/etc/systemd/system/kodi.service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description &#x3D; kodi-standalone using xinit</span><br><span class="line">After &#x3D; remote-fs.target systemd-user-sessions.service mysql.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User &#x3D; kodi</span><br><span class="line">Group &#x3D; kodi</span><br><span class="line">Type &#x3D; simple</span><br><span class="line">ExecStart &#x3D; &#x2F;usr&#x2F;bin&#x2F;xinit &#x2F;usr&#x2F;bin&#x2F;dbus-launch &#x2F;usr&#x2F;bin&#x2F;kodi-standalone -- :0 -nolisten tcp</span><br><span class="line">Restart &#x3D; always</span><br><span class="line">RestartSec &#x3D; 30</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy &#x3D; multi-user.target</span><br></pre></td></tr></table></figure><p>开机自动启动kodi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable kodi</span><br></pre></td></tr></table></figure><p>新建kodi用户，并添加权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser kodi</span><br><span class="line">usermod -a -G cdrom,audio,video,plugdev,users,dialout,dip,input kodi</span><br></pre></td></tr></table></figure><h3 id="kodi的配置文件"><a href="#kodi的配置文件" class="headerlink" title="kodi的配置文件"></a>kodi的配置文件</h3><p>kodi的配置文件是存放在个人home目录下的一个叫.kodi的目录里面，只要把整个目录备份了恢复出来kodi就是之前的模样，还是挺方便的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">su kodi</span><br><span class="line">cd &#x2F;homt&#x2F;kodi&#x2F;.kodi</span><br><span class="line">##恢复整个.kodi目录##</span><br><span class="line">exit</span><br><span class="line">cd</span><br></pre></td></tr></table></figure><h3 id="编译遥控器驱动"><a href="#编译遥控器驱动" class="headerlink" title="编译遥控器驱动"></a>编译遥控器驱动</h3><p>区别就是需要安装pve的内核头文件<code>pve-headers</code>和<code>gawk</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt install build-essential pve-headers gawk</span><br><span class="line">wget http:&#x2F;&#x2F;rtr.ca&#x2F;sapphire_remote&#x2F;sapphire-7.4.tar.gz</span><br><span class="line">tar xvf sapphire-7.4.tar.gz</span><br><span class="line">cd sapphire-7.4</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>编辑文件/etc/systemd/system/sapphire.service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Sapphire remote start script</span><br><span class="line">Before&#x3D;kodi.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;oneshot</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;sapphire_startup.sh</span><br><span class="line">RemainAfterExit&#x3D;yes</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p>恢复此前备份的/etc/sapphire.keymap文件</p><p>开机启动sapphire keymap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable sapphire</span><br><span class="line">systemctl start sapphire</span><br></pre></td></tr></table></figure><p>Enjoy ！！</p><p>参考：</p><ul><li><a href="https://github.com/graysky2/kodi-standalone-service">https://github.com/graysky2/kodi-standalone-service</a></li><li><a href="https://github.com/basilgello/kodi-nightly-debian-repo">https://github.com/basilgello/kodi-nightly-debian-repo</a></li><li><a href="https://forum.kodi.tv/showthread.php?tid=346920">https://forum.kodi.tv/showthread.php?tid=346920</a></li><li><a href="https://blog.d2okkk.net/202101/kodi-setup/">https://blog.d2okkk.net/202101/kodi-setup/</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;kodi官方的版本只支持Ubuntu，之前用Debian仓库的版本又不能硬件解码。时隔1年kodi发布了19版本，我也找到了在Debian下真正好用的kodi了。&lt;/p&gt;
&lt;p&gt;果断抛弃了Ubuntu Server 转投PVE的怀抱。虚拟机才是All in one最终的归宿。&lt;/p&gt;</summary>
    
    
    
    <category term="Home Lab" scheme="http://blog.d2okkk.net/categories/Home-Lab/"/>
    
    
    <category term="sapphire" scheme="http://blog.d2okkk.net/tags/sapphire/"/>
    
    <category term="Debian" scheme="http://blog.d2okkk.net/tags/Debian/"/>
    
    <category term="kodi" scheme="http://blog.d2okkk.net/tags/kodi/"/>
    
  </entry>
  
  <entry>
    <title>All in one小主机重装实录--Proxmox VE 6.3安装配置</title>
    <link href="http://blog.d2okkk.net/202104/j1800_setup_1/"/>
    <id>http://blog.d2okkk.net/202104/j1800_setup_1/</id>
    <published>2021-04-27T04:24:57.000Z</published>
    <updated>2021-04-29T12:30:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>本文主要介绍Proxmox VE 6.3的安装配置和利用Clover实现NVME SSD引导。</p><p>最近发现运行了2年的All in one小主机硬盘出现了坏道，于是萌生了重装+升级的想法，为了日后易于查找记录一下过程。</p><p>HTPC硬件平台（升级后） J1800+16G RAM+128G NVME SSD + 500G机械</p><a id="more"></a><h3 id="Proxmox-VE-6-3"><a href="#Proxmox-VE-6-3" class="headerlink" title="Proxmox VE 6.3"></a>Proxmox VE 6.3</h3><p>PVE的安装应该大致就是官网下载iso，然后<a href="https://www.balena.io/etcher/">balenaEtcher</a>写入U盘引导安装。值得注意的是，因为是把安装到NVME SSD，所以用UEFI+GPT引导会比较方便。</p><p>为了最大化利用NVME SSD空间，安装PVE的时候需要分区大小需要设置一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">swap 4G 交换空间，由于内存有16G，J1800弱鸡的性能估计用不到swap，但是安装程序规定最少4G。</span><br><span class="line">maxroot 8G 根分区大小，系统安装后只占用2G。</span><br><span class="line">maxvz 0 不要创建任何数据分区，安装系统后自行创建。</span><br></pre></td></tr></table></figure><h3 id="Clover引导"><a href="#Clover引导" class="headerlink" title="Clover引导"></a>Clover引导</h3><p>Clover是著名的黑苹果引导工具。本质上是一个模拟UEFI的软件，利用Clover可以实现老主板支持UEFI引导，免刷BIOS NVME SSD引导。我这里 J1800的小主板是支持UEFI的，但是没有UEFI里面NVME的驱动，无法从NVME SSD引导系统。刷BIOS固然是可以实现，但是借助Clover来引导比刷BIOS更方便，只需要一个小U盘就足够了。</p><p>制作方法是参照B站大佬<a href="https://www.bilibili.com/read/cv5496032/">lwyx2017</a> 的，他说得比较细致。大致过程就是</p><ul><li>下载最新版的<a href="https://github.com/CloverHackyColor/CloverBootloader/releases/">CloverBootloader</a>用 Clover-xxxx-X64.iso.7z那个文件。</li><li>用<a href="http://cvad-mac.narod.ru/index/bootdiskutility_exe/0-5">Boot Disk Utility</a> 这个工具把Clover写入到U盘，这个工具里面也可以自动从github下载到最新版本的CloverBootloader。其实原理就把U盘格式化成FAT32的分区，然后里面有个EFI的文件夹，是UEFI的标准引导方式。</li><li>打开U盘，找到目录EFI\CLOVER\drivers\off下面的NvmExpressDxe.efi那个文件，把他复制到EFI\CLOVER\drivers\BIOS和EFI\CLOVER\drivers\UEFI 两个地方。目的是让Clover加载NVME驱动，识别NVME SSD</li></ul><p>由于PVE是使用UEFI引导安装的，安装完成后NVME SSD里面已经自动分好了EFI分区。Clover U盘制作完成之后，直接插到J1800上就可以直接引导进入PVE了。</p><h3 id="PVE配置国内的Debain源和PVE源"><a href="#PVE配置国内的Debain源和PVE源" class="headerlink" title="PVE配置国内的Debain源和PVE源"></a>PVE配置国内的Debain源和PVE源</h3><p>由于种种原因，官方的apt源总是非常慢，换成国内科大的源，速度可以起飞。</p><p>国内源是用<a href="https://mirrors.ustc.edu.cn/">中国科学技术大学</a>的比较靠谱。</p><p>如果用阿里、腾讯、163速度慢不说，还经常有莫名奇妙的问题。还不如用官方源+特殊方式上网好。</p><p>编辑<code>/etc/apt/sources.list</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;debian&#x2F; buster main non-free contrib</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;debian&#x2F; buster main non-free contrib</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;debian-security buster&#x2F;updates main</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;debian-security buster&#x2F;updates main</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;debian&#x2F; buster-updates main non-free contrib</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;debian&#x2F; buster-updates main non-free contrib</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;debian&#x2F; buster-backports main non-free contrib</span><br><span class="line">deb-src https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;debian&#x2F; buster-backports main non-free contrib</span><br><span class="line"></span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;proxmox&#x2F;debian&#x2F;pve buster pve-no-subscription</span><br></pre></td></tr></table></figure><p>删除PVE企业源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;pve-enterprise.list</span><br></pre></td></tr></table></figure><p>最后执行升级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt update&amp;&amp;apt dist-upgrade </span><br></pre></td></tr></table></figure><h3 id="删除lvm-thin-存储池，建立LVM-cache为机械硬盘加速"><a href="#删除lvm-thin-存储池，建立LVM-cache为机械硬盘加速" class="headerlink" title="删除lvm-thin 存储池，建立LVM cache为机械硬盘加速"></a>删除lvm-thin 存储池，建立LVM cache为机械硬盘加速</h3><p>PVE的lvm-thin存储池是个好东西，但是在一块120G的SSD划分这么多区域，空间利用率不佳。</p><p>如果之前在安装的时候没有设置<code>maxvz=0</code>现在也可以把lvm-thin全部删掉，重新创建<code>data</code>卷和<code>cache</code>卷为机械硬盘加速。</p><p>删除data volume</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvremove pve&#x2F;data</span><br></pre></td></tr></table></figure><p><code>lsblk</code>查看磁盘分区情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@pve:~# lsblk</span><br><span class="line">NAME         MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda            8:0    0   1.8T  0 disk </span><br><span class="line">sdb            8:16   0 465.8G  0 disk </span><br><span class="line">sdc            8:32   1  62.5M  0 disk </span><br><span class="line">└─sdc1         8:33   1  62.5M  0 part </span><br><span class="line">nvme0n1      259:0    0 119.2G  0 disk </span><br><span class="line">├─nvme0n1p1  259:1    0  1007K  0 part </span><br><span class="line">├─nvme0n1p2  259:2    0   512M  0 part &#x2F;boot&#x2F;efi</span><br><span class="line">└─nvme0n1p3  259:3    0 118.8G  0 part </span><br><span class="line">  ├─pve-swap 253:0    0     4G  0 lvm  [SWAP]</span><br><span class="line">  └─pve-root 253:1    0     8G  0 lvm  &#x2F;</span><br></pre></td></tr></table></figure><p>可以看到NVME SSD被分成了3个区，第一个分区是mbr引导分区，第二个是efi引导分区，第三个就是lvm物理卷了。</p><p>sda和sdb都是机械硬盘，没有分区。</p><p>把500G机械硬盘的创建为物理卷（PV）并加入卷组（VG）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pvcreate &#x2F;dev&#x2F;sdb</span><br><span class="line">vgextend pve &#x2F;dev&#x2F;sdb</span><br></pre></td></tr></table></figure><p>创建机械盘、缓存和元数据的逻辑卷（LV）。缓存和元数据的比例是1000:1，即1G缓存LV配1M元数据LV，但元数据LV最小要8M。缓存使用回写模式。</p><p>SSD剩余的空间另外新建一个LV，用于存放虚拟机的硬盘映像IMG文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lvcreate -l 100%PVS -n st500g pve &#x2F;dev&#x2F;sdb</span><br><span class="line">lvcreate -L 32G -n CacheLV pve &#x2F;dev&#x2F;nvme0n1p3</span><br><span class="line">lvcreate -L 32M -n MetaLV pve &#x2F;dev&#x2F;nvme0n1p3</span><br><span class="line">lvconvert --type cache-pool --poolmetadata MetaLV pve&#x2F;CacheLV</span><br><span class="line">lvconvert --type cache --cachepool pve&#x2F;CacheLV --cachemode writeback pve&#x2F;st500g</span><br><span class="line">lvcreate -l 100%PVS -n ssd pve &#x2F;dev&#x2F;nvme0n1p3</span><br></pre></td></tr></table></figure><p>创建后可以使用<code>lvs</code>查看LV。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@pve:~# lvs</span><br><span class="line">  Unknown feature in status: 8 1066&#x2F;8192 128 12&#x2F;524288 5 51 0 0 0 12 0 3 metadata2 writeback no_discard_passdown 2 migration_threshold 2048 smq 0 rw - </span><br><span class="line">  LV     VG  Attr       LSize    Pool      Origin         Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  root   pve -wi-ao----    8.00g                                                                 </span><br><span class="line">  ssd    pve -wi-a-----  &lt;74.68g                                                                 </span><br><span class="line">  st500g pve Cwi-a-C--- &lt;465.76g [CacheLV] [st500g_corig] 0.01   13.01           0.00            </span><br><span class="line">  swap   pve -wi-ao----    4.00g</span><br></pre></td></tr></table></figure><p>格式化新建的2个LV，挂载到系统内。尝试使用一下下一代的文件系统xfs。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkfs.xfs &#x2F;dev&#x2F;mapper&#x2F;pve-ssd</span><br><span class="line">mkfs.xfs &#x2F;dev&#x2F;mapper&#x2F;pve-st500g</span><br><span class="line">mkdir &#x2F;mnt&#x2F;ssd</span><br><span class="line">mount -t xfs &#x2F;dev&#x2F;mapper&#x2F;pve-ssd &#x2F;mnt&#x2F;ssd</span><br><span class="line">mount -t xfs &#x2F;dev&#x2F;mapper&#x2F;pve-st500g &#x2F;home</span><br></pre></td></tr></table></figure><p><code>lsblk -f</code>查看uuid</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">root@pve:~# lsblk -f</span><br><span class="line">NAME                  FSTYPE      LABEL      UUID                                   FSAVAIL FSUSE% MOUNTPOINT</span><br><span class="line">sda                                                                                                </span><br><span class="line">sdb                   LVM2_member            dSSffk-IPC7-E2u7-MX3s-iuGv-zIF3-5ReeXX                </span><br><span class="line">└─pve-st500g_corig                                                                                 </span><br><span class="line">  └─pve-st500g        xfs                    999a81d5-dc4a-4013-b506-5736b8043e89      465G     0% &#x2F;home</span><br><span class="line">sdc                                                                                                </span><br><span class="line">└─sdc1                vfat        D2O-CLOVER 405F-7CDF                                             </span><br><span class="line">nvme0n1                                                                                            </span><br><span class="line">├─nvme0n1p1                                                                                        </span><br><span class="line">├─nvme0n1p2           vfat                   A2B6-D67F                               510.7M     0% &#x2F;boot&#x2F;efi</span><br><span class="line">└─nvme0n1p3           LVM2_member            AFVJ7j-WHd3-x2gU-MNb9-0Vgc-5kqg-fm6IBR                </span><br><span class="line">  ├─pve-swap          swap                   ae83391b-bfb3-43f9-8d4e-3279193b0b69                  [SWAP]</span><br><span class="line">  ├─pve-root          ext4                   b7dd2490-e7a3-4b76-b661-28ac02bbbc66      5.5G    24% &#x2F;</span><br><span class="line">  ├─pve-CacheLV_cdata                                                                              </span><br><span class="line">  │ └─pve-st500g      xfs                    999a81d5-dc4a-4013-b506-5736b8043e89      465G     0% &#x2F;home</span><br><span class="line">  ├─pve-CacheLV_cmeta                                                                              </span><br><span class="line">  │ └─pve-st500g      xfs                    999a81d5-dc4a-4013-b506-5736b8043e89      465G     0% &#x2F;home</span><br><span class="line">  └─pve-ssd           xfs                    69876a9a-3cdb-4d1a-b623-323ddf18684b                  </span><br></pre></td></tr></table></figure><p>编辑<code>/etc/fstab</code>实现开机自动挂载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UUID&#x3D;999a81d5-dc4a-4013-b506-5736b8043e89  &#x2F;home  xfs  defaults  0 0</span><br><span class="line">UUID&#x3D;69876a9a-3cdb-4d1a-b623-323ddf18684b  &#x2F;mnt&#x2F;ssd  xfs  defaults  0 0</span><br></pre></td></tr></table></figure><p>回到PVE的Web界面，找到数据中心–存储。在刚才创建的LV上新建目录型的存储，ID是显示在PVE里面存储池的名称，路径是挂载目录，内容全部选中，这样就能存放ISO镜像、磁盘镜像、容器、容器模板、VZDump备份文件等内容了。</p><p>参考：</p><ul><li><a href="https://pve.proxmox.com/wiki/Installation">https://pve.proxmox.com/wiki/Installation</a></li><li><a href="https://tieba.baidu.com/p/6282527282?pn=3">https://tieba.baidu.com/p/6282527282?pn=3</a></li><li><a href="https://tieba.baidu.com/p/6361557274?red_tag=3099761317">https://tieba.baidu.com/p/6361557274?red_tag=3099761317</a></li><li><a href="https://www.bilibili.com/read/cv5496032/">https://www.bilibili.com/read/cv5496032/</a></li><li><a href="https://forum.proxmox.com/threads/proxmox6-lvm-ssd-cache.57360/">https://forum.proxmox.com/threads/proxmox6-lvm-ssd-cache.57360/</a></li><li><a href="https://unix.stackexchange.com/questions/179621/how-to-stop-caching-a-lvm-partition/294037">https://unix.stackexchange.com/questions/179621/how-to-stop-caching-a-lvm-partition/294037</a></li><li><a href="https://www.liujason.com/article/315.html">https://www.liujason.com/article/315.html</a></li><li><a href="https://www.systutorials.com/docs/linux/man/7-lvmcache/">https://www.systutorials.com/docs/linux/man/7-lvmcache/</a></li><li><a href="https://blog.51cto.com/jschu/2044416">https://blog.51cto.com/jschu/2044416</a></li><li><a href="https://xan.manning.io/2017/05/29/best-practice-for-mounting-an-lvm-logical-volume-with-etc-fstab.html">https://xan.manning.io/2017/05/29/best-practice-for-mounting-an-lvm-logical-volume-with-etc-fstab.html</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;本文主要介绍Proxmox VE 6.3的安装配置和利用Clover实现NVME SSD引导。&lt;/p&gt;
&lt;p&gt;最近发现运行了2年的All in one小主机硬盘出现了坏道，于是萌生了重装+升级的想法，为了日后易于查找记录一下过程。&lt;/p&gt;
&lt;p&gt;HTPC硬件平台（升级后） J1800+16G RAM+128G NVME SSD + 500G机械&lt;/p&gt;</summary>
    
    
    
    <category term="Home Lab" scheme="http://blog.d2okkk.net/categories/Home-Lab/"/>
    
    
    <category term="proxmox ve" scheme="http://blog.d2okkk.net/tags/proxmox-ve/"/>
    
    <category term="clover" scheme="http://blog.d2okkk.net/tags/clover/"/>
    
    <category term="uefi" scheme="http://blog.d2okkk.net/tags/uefi/"/>
    
    <category term="debian" scheme="http://blog.d2okkk.net/tags/debian/"/>
    
    <category term="pve" scheme="http://blog.d2okkk.net/tags/pve/"/>
    
  </entry>
  
  <entry>
    <title>基于VXLAN EVPN的异地组网</title>
    <link href="http://blog.d2okkk.net/202103/vxlan_evpn_with_frr/"/>
    <id>http://blog.d2okkk.net/202103/vxlan_evpn_with_frr/</id>
    <published>2021-03-15T11:52:57.000Z</published>
    <updated>2021-03-15T14:06:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>本文主要介绍了如何使用<a href="https://www.openwrt.org/">Openwrt</a> 官方SDK编译最新版FRR，并使用<a href="https://frrouting.org/">FRRouting</a>建立VXLAN EVPN网络，实现异地组网。</p><p>基本拓扑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">                              +-+--+-+</span><br><span class="line">      +-----Internet----------++|RR|++---------Internet-------+</span><br><span class="line">      |                       +-+--+-+                        |</span><br><span class="line">      |                                                       |</span><br><span class="line">      |                                                       |</span><br><span class="line">      |                                                       |</span><br><span class="line">      |                                                       |</span><br><span class="line">      |                                                       |</span><br><span class="line">+-----+--------+                                        +-----+-------+</span><br><span class="line">|   eth0.2     |                                        |   eth0.2    |</span><br><span class="line">|       eth0.46+---------Private-----10.0.0.0&#x2F;7---------+eth0.46      |</span><br><span class="line">|    Site1     |                                        |    Site2    |</span><br><span class="line">+--------------+                                        +-------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明：</p><p>Site 1与Site2之间有内网，接口eth0.46。不同网段，路由可达。ip范围10.0.0.0/7，dhcp动态获取。</p><p>RR是公网上拥有固定ip地址的服务器，Site 1和Site2使用eth0.2连接公网。</p><p>RR负责为Site 1和Site 2交换MAC地址信息。Site 1与Site 2互访使用内网流量。</p><a id="more"></a><h3 id="交叉编译FRRouting"><a href="#交叉编译FRRouting" class="headerlink" title="交叉编译FRRouting"></a>交叉编译FRRouting</h3><p>目前最新版的Openwrt仍然未集成FRRouting，需要进行交叉编译。如果是普通的Linux发行版，可以使用二进制安装。以MT7620平台为例，首先使用docker建立openwrt编译环境。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;mwarning&#x2F;docker-openwrt-builder.git</span><br><span class="line">cd docker-openwrt-builder</span><br><span class="line">docker build -t openwrt_builder .</span><br><span class="line">mkdir ~&#x2F;mybuild</span><br><span class="line">docker run -v ~&#x2F;mybuild:&#x2F;home&#x2F;user -it openwrt_builder &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>下载官方最新稳定版本的SDK，解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;downloads.openwrt.org&#x2F;releases&#x2F;19.07.7&#x2F;targets&#x2F;ramips&#x2F;mt7620&#x2F;openwrt-sdk-19.07.7-ramips-mt7620_gcc-7.5.0_musl.Linux-x86_64.tar.xz</span><br><span class="line">tar xvf openwrt-sdk-19.07.7-ramips-mt7620_gcc-7.5.0_musl.Linux-x86_64.tar.xz</span><br></pre></td></tr></table></figure><p>使用master的feeds</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd openwrt-sdk-19.07.7-ramips-mt7620_gcc-7.5.0_musl.Linux-x86_64</span><br><span class="line">cat &lt;&lt; EOF &gt;feeds.conf</span><br><span class="line">src-git base https:&#x2F;&#x2F;git.openwrt.org&#x2F;openwrt&#x2F;openwrt.git</span><br><span class="line">src-git packages https:&#x2F;&#x2F;git.openwrt.org&#x2F;feed&#x2F;packages.git</span><br><span class="line">src-git routing https:&#x2F;&#x2F;git.openwrt.org&#x2F;feed&#x2F;routing.git</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>更新feeds，安装frr</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;scripts&#x2F;feeds update -a</span><br><span class="line">.&#x2F;scripts&#x2F;feeds install frr</span><br></pre></td></tr></table></figure><p>生成一对密钥，为后续编译出来的ipk签名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;staging_dir&#x2F;host&#x2F;bin&#x2F;usign -G -s .&#x2F;key-build -p .&#x2F;key-build.pub -c &quot;D2O Local build key&quot;</span><br></pre></td></tr></table></figure><p>万事具备，就可以开始make了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make package&#x2F;frr&#x2F;compile V&#x3D;s</span><br></pre></td></tr></table></figure><p>如无意外，经过一段稍微有点长的时间，就编译完成了。编译完成后会发现bin目录里面多了很多ipk包。这个时候需要用密钥对ipk包进行签名，并生成index。最后把bin目录里面的内容放到一个能够使用http访问的地方。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make package&#x2F;index V&#x3D;s</span><br><span class="line">cp key-build.pub &#x2F;var&#x2F;www&#x2F;nginx&#x2F;html&#x2F;d2o_fun.pub</span><br><span class="line">cp -R .&#x2F;bin&#x2F;* &#x2F;var&#x2F;www&#x2F;nginx&#x2F;html&#x2F;</span><br></pre></td></tr></table></figure><h3 id="路由器安装FRR"><a href="#路由器安装FRR" class="headerlink" title="路由器安装FRR"></a>路由器安装FRR</h3><p>来到路由器上安装frr，添加公钥，添加自定义的软件源。然后opkg安装就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;d2okkk.net&#x2F;19.07.7&#x2F;d2o_fun.pub</span><br><span class="line">opkg-key add d2o_fun.pub</span><br><span class="line">cat &lt;&lt; EOF &gt;&#x2F;etc&#x2F;opkg&#x2F;d2o.conf</span><br><span class="line">src&#x2F;gz d2o_base https:&#x2F;&#x2F;d2okkk.net&#x2F;19.07.7&#x2F;packages&#x2F;mipsel_24kc&#x2F;base</span><br><span class="line">src&#x2F;gz d2o_packages https:&#x2F;&#x2F;d2okkk.net&#x2F;19.07.7&#x2F;packages&#x2F;mipsel_24kc&#x2F;packages</span><br><span class="line">EOF</span><br><span class="line">opkg update</span><br><span class="line">opkg install frr frr-vtysh frr-zebra frr-bgpd frr-watchfrr frr-staticd kmod-vxlan ip ip-bridge</span><br></pre></td></tr></table></figure><h3 id="Route-Reflector的配置"><a href="#Route-Reflector的配置" class="headerlink" title="Route Reflector的配置"></a>Route Reflector的配置</h3><p>Route Reflector(RR)是在公网上拥有固定IP的云主机，直接使用二进制包安装FRR就行了。配置也是参照Vincent大神的。只是BGP直接listen全网。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vtysh</span><br><span class="line">conf t</span><br><span class="line">router bgp 65005</span><br><span class="line"> neighbor ixp peer-group</span><br><span class="line"> neighbor ixp remote-as external</span><br><span class="line"> neighbor ixp ebgp-multihop 30</span><br><span class="line"> neighbor ixp update-source x.x.x.x(云主机的公网地址)</span><br><span class="line"> neighbor ixp capability extended-nexthop</span><br><span class="line"> bgp listen range 0.0.0.0&#x2F;0 peer-group ixp</span><br><span class="line">  address-family l2vpn evpn</span><br><span class="line">  neighbor ixp activate</span><br><span class="line">  advertise-all-vni</span><br><span class="line">  advertise-svi-ip</span><br><span class="line"> exit-address-family</span><br></pre></td></tr></table></figure><h3 id="Site1和Site2的配置"><a href="#Site1和Site2的配置" class="headerlink" title="Site1和Site2的配置"></a>Site1和Site2的配置</h3><p>安装好FRR之后先编辑<code>/etc/frr/daemons</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bgpd&#x3D;yes</span><br></pre></td></tr></table></figure><p>然后就可以开启frr进程了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;frr start</span><br></pre></td></tr></table></figure><p>配置bgp l2vpn，其中x.x.x.x是RR的公网地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vtysh</span><br><span class="line">conf t</span><br><span class="line">router bgp 65008(ASN不重要，只要和RR不一样，组成eBGP就行，因为只有eBGP才支持multihop)</span><br><span class="line"> neighbor x.x.x.x remote-as external</span><br><span class="line"> neighbor x.x.x.x ebgp-multihop 30</span><br><span class="line"> neighbor x.x.x.x capability extended-nexthop</span><br><span class="line">  address-family l2vpn evpn</span><br><span class="line">  neighbor x.x.x.x activate</span><br><span class="line">  advertise-all-vni</span><br><span class="line">  advertise-svi-ip</span><br><span class="line"> exit-address-family</span><br></pre></td></tr></table></figure><p>配置完成后会发现BGP会话无法起来，先排除RR的TCP179端口是否已打开。</p><p>回到<code>frr</code>会<code>show bgp neighbor x.x.x.x</code>发现neighbor一直在<em>Waiting for NHT</em></p><p>说明需要添加RR的主机路由到默认网关。</p><p>如果Openwrt是静态ip上网，在luci web里面添加静态路由就可以了。类似这样<code>/etc/config/network</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config route</span><br><span class="line">        option interface &#39;wan&#39;</span><br><span class="line">        option target &#39;x.x.x.x&#39;</span><br><span class="line">        option gateway &#39;192.168.1.1&#39;</span><br></pre></td></tr></table></figure><p>如是PPPOE拨号，就需要使用到ppp-up脚本添加主机路由。<code>/etc/ppp/ip-up.d/pppoe.sh </code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line"></span><br><span class="line"># parameters</span><br><span class="line"># $1 the interface name used by pppd (e.g. ppp3)</span><br><span class="line"># $2 the tty device name</span><br><span class="line"># $3 the tty device speed</span><br><span class="line"># $4 the local IP address for the interface</span><br><span class="line"># $5 the remote IP address</span><br><span class="line"># $6 the parameter specified by the &#39;ipparam&#39; option to pppd</span><br><span class="line"></span><br><span class="line">echo $@ &gt;&#x2F;tmp&#x2F;ppp_parameters</span><br><span class="line"></span><br><span class="line">PPP_FW&#x3D;&#x2F;tmp&#x2F;firewall.pppoe</span><br><span class="line">gateway_length&#x3D;&#96;expr length $5&#96;</span><br><span class="line">echo $&#123;gateway_length&#125;</span><br><span class="line">GW&#x3D;$5</span><br><span class="line">LOCAL_IP&#x3D;$4</span><br><span class="line">DEV&#x3D;$1</span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">pppoe-wan)</span><br><span class="line">if [ $&#123;gateway_length&#125; -le 15 ]; then</span><br><span class="line">  echo IPv4</span><br><span class="line">  ip route add x.x.x.x via $GW dev $DEV</span><br><span class="line">else                    </span><br><span class="line">  echo &quot;IPV6 or Unrecognized IP format &#39;$5&#39;&quot;</span><br><span class="line">fi </span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h3 id="VXLAN接口的配置"><a href="#VXLAN接口的配置" class="headerlink" title="VXLAN接口的配置"></a>VXLAN接口的配置</h3><p>把BGP Session搞up之后，就可以配置VXLAN接口了。我这里使用VNI 5，VNI由24比特组成，可以支持16M的子网。只要2个site的VNI相同就可以互相通信。在这里我分配了一个Overlay使用的互联地址段100.69.0.0/24。</p><p>登录LUCI WEB，选择网络—接口，新建接口</p><p>两个site分别使用静态地址100.69.0.1/24和100.69.0.2/24，创建桥接到vxlan5，mtu 1450。</p><p>由于Site1和Site2之间的私网是通过dhcp获取地址的，使用<code>/etc/udhcpc.user </code>脚本来触发建立隧道。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">bound)</span><br><span class="line">if [ eth0.46 &#x3D; &quot;$&#123;interface&#125;&quot; ]; then</span><br><span class="line">ip route add 10.0.0.0&#x2F;7 via $&#123;router&#125;</span><br><span class="line">ip link del vxlan5</span><br><span class="line">ip link add vxlan5 type vxlan id 5 local $&#123;ip&#125; dstport 4789</span><br><span class="line">fi</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><p>别忘了在防火墙开启UDP 4789，如无意外100.69.0.1和100.69.0.2就可以互相ping通了。</p><p>在Site1和Site2的frr上使用<code>show bgp l2vpn evpn </code>可以看到从RR学习到的Type2和Type3的路由。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">OpenWrt# show bgp l2vpn evpn </span><br><span class="line">BGP table version is 0, local router ID is 198.18.22.130</span><br><span class="line">Status codes: s suppressed, d damped, h history, * valid, &gt; best, i - internal</span><br><span class="line">Origin codes: i - IGP, e - EGP, ? - incomplete</span><br><span class="line">EVPN type-1 prefix: [1]:[ESI]:[EthTag]:[IPlen]:[VTEP-IP]</span><br><span class="line">EVPN type-2 prefix: [2]:[EthTag]:[MAClen]:[MAC]:[IPlen]:[IP]</span><br><span class="line">EVPN type-3 prefix: [3]:[EthTag]:[IPlen]:[OrigIP]</span><br><span class="line">EVPN type-4 prefix: [4]:[ESI]:[IPlen]:[OrigIP]</span><br><span class="line">EVPN type-5 prefix: [5]:[EthTag]:[IPlen]:[IP]</span><br><span class="line"></span><br><span class="line">   Network          Next Hop            Metric LocPrf Weight Path</span><br><span class="line">Route Distinguisher: 198.18.8.244:2</span><br><span class="line">*&gt; [2]:[0]:[48]:[f6:96:37:a3:82:8f]:[32]:[100.69.0.2]</span><br><span class="line">                    11.92.111.32                           0 65005 65008 i</span><br><span class="line">                    RT:65008:5 ET:8</span><br><span class="line">*&gt; [2]:[0]:[48]:[f6:96:37:a3:82:8f]:[128]:[fe80::f496:37ff:fea3:828f]</span><br><span class="line">                    11.92.111.32                           0 65005 65008 i</span><br><span class="line">                    RT:65008:5 ET:8</span><br><span class="line">*&gt; [3]:[0]:[32]:[11.92.111.32]</span><br><span class="line">                    11.92.111.32                           0 65005 65008 i</span><br><span class="line">                    RT:65008:5 ET:8</span><br><span class="line">Route Distinguisher: 198.18.22.130:2</span><br><span class="line">*&gt; [2]:[0]:[48]:[4a:73:1d:22:4c:e3]:[32]:[100.69.0.1]</span><br><span class="line">                    11.94.117.77                       32768 i</span><br><span class="line">                    ET:8 RT:65022:5</span><br><span class="line">*&gt; [2]:[0]:[48]:[4a:73:1d:22:4c:e3]:[128]:[fe80::4873:1dff:fe22:4ce3]</span><br><span class="line">                    11.94.117.77                       32768 i</span><br><span class="line">                    ET:8 RT:65022:5</span><br><span class="line">*&gt; [3]:[0]:[32]:[11.94.117.77]</span><br><span class="line">                    11.94.117.77                       32768 i</span><br><span class="line">                    ET:8 RT:65022:5</span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://github.com/mwarning/docker-openwrt-builder">https://github.com/mwarning/docker-openwrt-builder</a></li><li><a href="https://asciiflow.com/#/">https://asciiflow.com/#/</a></li><li><a href="https://vincent.bernat.ch/en/blog/2017-vxlan-linux">https://vincent.bernat.ch/en/blog/2017-vxlan-linux</a></li><li><a href="https://forum.openwrt.org/t/cant-compile-ipk-with-sdk-key-build-signing-key-is-missing/2266/2">https://forum.openwrt.org/t/cant-compile-ipk-with-sdk-key-build-signing-key-is-missing/2266/2</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;本文主要介绍了如何使用&lt;a href=&quot;https://www.openwrt.org/&quot;&gt;Openwrt&lt;/a&gt; 官方SDK编译最新版FRR，并使用&lt;a href=&quot;https://frrouting.org/&quot;&gt;FRRouting&lt;/a&gt;建立VXLAN EVPN网络，实现异地组网。&lt;/p&gt;
&lt;p&gt;基本拓扑&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;                              +-+--+-+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      +-----Internet----------++|RR|++---------Internet-------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |                       +-+--+-+                        |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |                                                       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |                                                       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |                                                       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |                                                       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |                                                       |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-----+--------+                                        +-----+-------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|   eth0.2     |                                        |   eth0.2    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|       eth0.46+---------Private-----10.0.0.0&amp;#x2F;7---------+eth0.46      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|    Site1     |                                        |    Site2    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+--------------+                                        +-------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;Site 1与Site2之间有内网，接口eth0.46。不同网段，路由可达。ip范围10.0.0.0/7，dhcp动态获取。&lt;/p&gt;
&lt;p&gt;RR是公网上拥有固定ip地址的服务器，Site 1和Site2使用eth0.2连接公网。&lt;/p&gt;
&lt;p&gt;RR负责为Site 1和Site 2交换MAC地址信息。Site 1与Site 2互访使用内网流量。&lt;/p&gt;</summary>
    
    
    
    <category term="Home Lab" scheme="http://blog.d2okkk.net/categories/Home-Lab/"/>
    
    
    <category term="openwrt" scheme="http://blog.d2okkk.net/tags/openwrt/"/>
    
    <category term="vxlan" scheme="http://blog.d2okkk.net/tags/vxlan/"/>
    
    <category term="frr" scheme="http://blog.d2okkk.net/tags/frr/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu Server 20.04 LTS 最小安装kodi</title>
    <link href="http://blog.d2okkk.net/202101/kodi-setup/"/>
    <id>http://blog.d2okkk.net/202101/kodi-setup/</id>
    <published>2021-01-16T05:01:57.000Z</published>
    <updated>2021-01-16T06:19:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>如果只想简单使用kodi，不用这么复杂，直接安装<a href="https://libreelec.tv/">LibreELEC</a>就可以了。我这是为了复用这台HTPC(J1800+8G内存)而弄，最终目标NAS+Kodi是All in one。</p><p>如果HTPC硬件比较先进(支持VT-D)，也不用这么复杂，安装虚拟机平台(<a href="https://www.vmware.com/cn/products/esxi-and-esx.html">VMware ESXi</a>、<a href="https://pve.proxmox.com/wiki/Main_Page">PVE</a>)把对应硬件直通，再安装<a href="https://libreelec.tv/">LibreELEC</a>、DSM6就行了。</p><a id="more"></a><h3 id="最小化安装Ubuntu-Server-20-04-LTS"><a href="#最小化安装Ubuntu-Server-20-04-LTS" class="headerlink" title="最小化安装Ubuntu Server 20.04 LTS"></a>最小化安装Ubuntu Server 20.04 LTS</h3><p>由于内存有限，只安装必需的包。官网下载Ubuntu Server 20.04 LTS的<a href="https://releases.ubuntu.com/20.04/ubuntu-20.04.1-live-server-amd64.iso">ISO</a>，然后使用<a href="https://www.balena.io/etcher/">balenaEtcher</a>写入U盘Boot机安装。</p><p>安装过程全部默认，使用整个磁盘不使用LVM，软件包仅安装openssh。手动配置IP，用户名d2o。</p><p>删除cloud-init</p><blockquote><ul><li><p>Remove all cloud-init datasources</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;datasource_list: [ None ]&#39; | sudo -s tee &#x2F;etc&#x2F;cloud&#x2F;cloud.cfg.d&#x2F;90_dpkg.cfg</span><br></pre></td></tr></table></figure></li><li><p>Uninstall all it’s packages</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get purge cloud-init</span><br></pre></td></tr></table></figure></li><li><p>Delete all it’s configuration files</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf &#x2F;etc&#x2F;cloud&#x2F;; sudo rm -rf &#x2F;var&#x2F;lib&#x2F;cloud&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>Remove open-iscsi</p><p>The iSCSI daemon will wait indefinitely and hang the boot process if it’s not removed when cloud-init is removed</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove open-iscsi</span><br></pre></td></tr></table></figure></li></ul></blockquote><p>删除snap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt purge snapd</span><br></pre></td></tr></table></figure><p>更新所有软件，安装驱动、x框架等kodi的依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ssh software-properties-common xorg xserver-xorg-legacy \</span><br><span class="line">alsa-utils mesa-utils git-core librtmp1 libmad0 lm-sensors libmpeg2-4 \</span><br><span class="line">avahi-daemon libnfs13 libva2 vainfo i965-va-driver linux-firmware dbus-x11 \</span><br><span class="line">udisks2 pastebinit udisks2 xserver-xorg-video-intel</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>配置允许”everyone” 启动Xserver</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure xserver-xorg-legacy</span><br></pre></td></tr></table></figure><p>新建kodi用户，并添加响应权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser kodi</span><br><span class="line">sudo usermod -a -G cdrom,audio,video,plugdev,users,dialout,dip,input kodi</span><br></pre></td></tr></table></figure><p>我这里是服务器不需要关机，所以这个不做</p><p>编辑<code>/etc/polkit-1/localauthority/50-local.d/custom-actions.pkla</code>，添加以下内容使kodi可以重启和关机。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Actions for kodi user]</span><br><span class="line">Identity&#x3D;unix-user:kodi</span><br><span class="line">Action&#x3D;org.freedesktop.login1.*;org.freedesktop.udisks2.*</span><br><span class="line">ResultAny&#x3D;yes</span><br><span class="line">ResultInactive&#x3D;yes</span><br><span class="line">ResultActive&#x3D;yes</span><br><span class="line"></span><br><span class="line">[Untrusted Upgrade]</span><br><span class="line">Identity&#x3D;unix-user:kodi</span><br><span class="line">Action&#x3D;org.debian.apt.upgrade-packages;org.debian.apt.update-cache</span><br><span class="line">ResultAny&#x3D;yes</span><br><span class="line">ResultInactive&#x3D;yes</span><br><span class="line">ResultActive&#x3D;yes</span><br></pre></td></tr></table></figure><p>添加kodi为服务，实现开机启动，这里直接是用kodi-standalone模式，这样只需要有X11就行了，可以省掉gnome、xface或者openbox之类的桌面环境。编辑<code>/etc/systemd/system/kodi.service</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description &#x3D; kodi-standalone using xinit</span><br><span class="line">After &#x3D; remote-fs.target systemd-user-sessions.service mysql.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User &#x3D; kodi</span><br><span class="line">Group &#x3D; kodi</span><br><span class="line">Type &#x3D; simple</span><br><span class="line">ExecStart &#x3D; &#x2F;usr&#x2F;bin&#x2F;xinit &#x2F;usr&#x2F;bin&#x2F;dbus-launch &#x2F;usr&#x2F;bin&#x2F;kodi-standalone -- :0 -nolisten tcp</span><br><span class="line">Restart &#x3D; always</span><br><span class="line">RestartSec &#x3D; 30</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy &#x3D; multi-user.target</span><br></pre></td></tr></table></figure><p>开机自动启动kodi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl enable kodi</span><br></pre></td></tr></table></figure><h3 id="安装kodi"><a href="#安装kodi" class="headerlink" title="安装kodi"></a>安装kodi</h3><p>准备了这么多，终于开始安装kodi了。安装kodi是很简单的，几条命令搞定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-add-repository ppa:team-xbmc&#x2F;ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get dist-upgrade</span><br><span class="line">sudo apt-get install kodi kodi-x11 kodi-pvr-iptvsimple</span><br><span class="line">sudo systemctl start kodi</span><br></pre></td></tr></table></figure><h3 id="关于遥控"><a href="#关于遥控" class="headerlink" title="关于遥控"></a>关于遥控</h3><p>遥控是在同辈兄弟小熊家买的蓝宝石SAPPHIRE Theatrix电视卡附送的遥控器，比一般的HP之类的mce遥控便宜不少，当然代价是不能即插即用。直接插入电脑只能使用一部分按键。</p><p><img src="https://qzxx.com/wp-content/uploads/2017/12/7968f8254805154.jpg" alt="蓝宝石电视卡遥控"></p><p>当然这对于一名合格的垃圾佬，这不是什么难题。因为这个早已经有大神解决了，只需要站在巨人的肩膀上就能看得更远。下载Mark Lord大神的<a href="http://rtr.ca/sapphire_remote/index.html">驱动</a>，编译上去即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential</span><br><span class="line">wget http:&#x2F;&#x2F;rtr.ca&#x2F;sapphire_remote&#x2F;sapphire-7.4.tar.gz</span><br><span class="line">tar xvf sapphire-7.4.tar.gz</span><br><span class="line">cd sapphire-7.4</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>这个驱动是为MythTV制作的，要适配kodi的话还需要做一点点keymap的工作。</p><p>附上我自己用的2个keymap文件，第一个是遥控器映射为键盘按键的配置，根据自己需求修改后用<code>sapphire_keymap.sh</code>来加载，第二个是修改kodi默认的键盘快捷键。</p><p><a href="sapphire.keymap">/etc/sapphire.keymap</a></p><p><a href="gen.xml">/home/kodi/.kodi/userdata/keymaps/gen.xml</a></p><p>最后用这个sapphire的驱动覆盖系统自带的topseed驱动，开机自动加载keymap配置。</p><p>编辑文件<code>/etc/systemd/system/sapphire.service</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Sapphire remote start script</span><br><span class="line">Before&#x3D;kodi.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;oneshot</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;sapphire_startup.sh</span><br><span class="line">RemainAfterExit&#x3D;yes</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl enable sapphire</span><br><span class="line">sudo systemctl start sapphire</span><br></pre></td></tr></table></figure><p>这样系统启动之后遥控器就直接可用了。</p><p>参考：</p><ul><li><p><a href="https://github.com/OnceUponALoop/mini-kodi">https://github.com/OnceUponALoop/mini-kodi</a></p></li><li><p><a href="https://forum.kodi.tv/showthread.php?tid=231955">https://forum.kodi.tv/showthread.php?tid=231955</a></p></li><li><p><a href="https://forum.kodi.tv/showthread.php?tid=231955&amp;page=339">https://forum.kodi.tv/showthread.php?tid=231955&amp;page=339</a></p></li><li><p><a href="https://forum.kodi.tv/showthread.php?tid=333108&amp;page=2">https://forum.kodi.tv/showthread.php?tid=333108&amp;page=2</a></p></li><li><p><a href="https://kodi.wiki/view/Keymap#Remotes">https://kodi.wiki/view/Keymap#Remotes</a></p></li><li><p><a href="https://github.com/xbmc/xbmc/blob/master/system/keymaps/remote.xml">https://github.com/xbmc/xbmc/blob/master/system/keymaps/remote.xml</a></p></li><li><p><a href="https://kodi.wiki/view/Using_an_MCE_remote">https://kodi.wiki/view/Using_an_MCE_remote</a></p></li><li><p><a href="https://kodi.wiki/view/Keyboard_controls#Customizing_buttons_through_the_GUI">https://kodi.wiki/view/Keyboard_controls#Customizing_buttons_through_the_GUI</a></p></li><li><p><a href="http://rtr.ca/sapphire_remote/index.html">http://rtr.ca/sapphire_remote/index.html</a></p></li><li><p><a href="https://web.archive.org/web/20170714192652/http://kodi.wiki/view/Sapphire_Remote">https://web.archive.org/web/20170714192652/http://kodi.wiki/view/Sapphire_Remote</a></p></li><li><p><a href="https://forum.libreelec.tv/thread/634-compile-sapphire-remote-driver/?pageNo=3">https://forum.libreelec.tv/thread/634-compile-sapphire-remote-driver/?pageNo=3</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h3&gt;&lt;p&gt;如果只想简单使用kodi，不用这么复杂，直接安装&lt;a href=&quot;https://libreelec.tv/&quot;&gt;LibreELEC&lt;/a&gt;就可以了。我这是为了复用这台HTPC(J1800+8G内存)而弄，最终目标NAS+Kodi是All in one。&lt;/p&gt;
&lt;p&gt;如果HTPC硬件比较先进(支持VT-D)，也不用这么复杂，安装虚拟机平台(&lt;a href=&quot;https://www.vmware.com/cn/products/esxi-and-esx.html&quot;&gt;VMware ESXi&lt;/a&gt;、&lt;a href=&quot;https://pve.proxmox.com/wiki/Main_Page&quot;&gt;PVE&lt;/a&gt;)把对应硬件直通，再安装&lt;a href=&quot;https://libreelec.tv/&quot;&gt;LibreELEC&lt;/a&gt;、DSM6就行了。&lt;/p&gt;</summary>
    
    
    
    <category term="Home Lab" scheme="http://blog.d2okkk.net/categories/Home-Lab/"/>
    
    
    <category term="sapphire" scheme="http://blog.d2okkk.net/tags/sapphire/"/>
    
    <category term="kodi" scheme="http://blog.d2okkk.net/tags/kodi/"/>
    
    <category term="ubuntu" scheme="http://blog.d2okkk.net/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>编译安装libbgpdump IRRToolset等BGP相关软件包</title>
    <link href="http://blog.d2okkk.net/201709/bgpdump/"/>
    <id>http://blog.d2okkk.net/201709/bgpdump/</id>
    <published>2017-09-15T03:45:00.000Z</published>
    <updated>2017-09-15T05:34:53.065Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://bitbucket.org/ripencc/bgpdump/wiki/Home">libbgpdump</a>是RIPE NCC提供的BGP路由表分析工具，可以通过<a href="https://www.ripe.net/analyse/internet-measurements/routing-information-service-ris/ris-raw-data">RIPE NCC</a>或者<a href="http://routeviews.org/">RouteViews</a>提供的RIB路由表来分析全球BGP路由情况。</p><p><a href="https://github.com/irrtoolset/irrtoolset">IRRToolset</a>是互联网路由策略生成工具，可以通过<code>Internet Routing Registries (IRR)</code>服务生成路由策略。目前我用到的只是他提供的<code>peval</code>，把<code>AS-set</code>转换成<code>ASN</code>列表的功能。</p> <a id="more"></a><p><a href="https://bgpstream.caida.org/download">BGPStream</a>可以看成是<code>libbgpdump</code>的升级版，可以完全取代<code>libbgpdump</code>，并支持更多高级特性。<br>目前我用到的只是他提供的<a href="https://bgpstream.caida.org/docs/api/broker">Broker HTTP API</a>可以不用下载rib文件，直接获取rib数据。</p><p><a href="https://github.com/firehol/iprange">iprange</a>，ip地址格式转换、合并、排序神器，可以支持多种格式的输入输出，C语言编写，效率高。</p><p>以下是编译安装这些工具的记录。</p><p>编译安装libgpdump</p><p>首先安装依赖<code>zlib-devel</code> <code>bzip2-devel</code> ，然后下载<a href="http://ris.ripe.net/source/bgpdump/libbgpdump-1.5.0.tgz">源码包</a>，最后make一下就好了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bzip2-devel zlib-devel</span><br><span class="line">wget http://ris.ripe.net/<span class="built_in">source</span>/bgpdump/libbgpdump-1.5.0.tgz</span><br><span class="line">tar xvf libbgpdump-1.5.0.tgz</span><br><span class="line"><span class="built_in">cd</span> libbgpdump-1.5.0</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">bgpdump --version</span><br></pre></td></tr></table></figure><p>编译安装IRRToolset：</p><p>笔者的CentOS 7.4.1708直接编译不通过，需要打2个补丁。<br>CentOS 6 是可以直接编译，原因不深究。。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget ftp://ftp.isc.org/isc/IRRToolSet/IRRToolSet-5.0.1/irrtoolset-5.0.1.tar.gz</span><br><span class="line">tar xvf irrtoolset-5.0.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> irrtoolset-5.0.1</span><br><span class="line">wget http://ftp.netbsd.org/pub/pkgsrc/current/pkgsrc/net/irrtoolset5/patches/patch-src_rpsl_Makefile.in</span><br><span class="line">wget http://ftp.netbsd.org/pub/pkgsrc/current/pkgsrc/net/irrtoolset5/patches/patch-src_rpsl_object.cc</span><br><span class="line">patch src/rpsl/Makefile.in patch-src_rpsl_Makefile.in</span><br><span class="line">patch src/rpsl/object.cc patch-src_rpsl_object.cc</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>编译安装BGPStream：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://bgpstream.caida.org/bundles/caidabgpstreamwebhomepage/dists/bgpstream-1.1.0.tar.gz</span><br><span class="line">tar xvf bgpstream-1.1.0.tar.gz</span><br><span class="line">rpm -ivh https://www.cloudrouter.org/repo/proving_ground/centos/7/x86_64/libwandio-devel-1.0.4-2.el7.centos.x86_64.rpm</span><br><span class="line"><span class="built_in">cd</span> bgpstream-1.1.0</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>编译安装iprange：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://firehol.org/download/iprange/releases/v1.0.3/iprange-1.0.3.tar.gz</span><br><span class="line">tar xvf iprange-1.0.3.tar.gz</span><br><span class="line"><span class="built_in">cd</span> iprange-1.0.3</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://www.ripe.net/analyse/internet-measurements/routing-information-service-ris/ris-raw-data">https://www.ripe.net/analyse/internet-measurements/routing-information-service-ris/ris-raw-data</a><br><a href="https://github.com/irrtoolset/irrtoolset">https://github.com/irrtoolset/irrtoolset</a><br><a href="https://www.isc.org/downloads/">https://www.isc.org/downloads/</a><br><a href="http://ndonaghy.com/561">http://ndonaghy.com/561</a><br><a href="https://lists.isc.org/pipermail/irrtoolset/2013-October/000838.html">https://lists.isc.org/pipermail/irrtoolset/2013-October/000838.html</a><br><a href="http://research.wand.net.nz/software/libwandio.php">http://research.wand.net.nz/software/libwandio.php</a><br><a href="https://github.com/firehol/iprange">https://github.com/firehol/iprange</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/ripencc/bgpdump/wiki/Home&quot;&gt;libbgpdump&lt;/a&gt;是RIPE NCC提供的BGP路由表分析工具，可以通过&lt;a href=&quot;https://www.ripe.net/analyse/internet-measurements/routing-information-service-ris/ris-raw-data&quot;&gt;RIPE NCC&lt;/a&gt;或者&lt;a href=&quot;http://routeviews.org/&quot;&gt;RouteViews&lt;/a&gt;提供的RIB路由表来分析全球BGP路由情况。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/irrtoolset/irrtoolset&quot;&gt;IRRToolset&lt;/a&gt;是互联网路由策略生成工具，可以通过&lt;code&gt;Internet Routing Registries (IRR)&lt;/code&gt;服务生成路由策略。目前我用到的只是他提供的&lt;code&gt;peval&lt;/code&gt;，把&lt;code&gt;AS-set&lt;/code&gt;转换成&lt;code&gt;ASN&lt;/code&gt;列表的功能。&lt;/p&gt;</summary>
    
    
    
    <category term="系统" scheme="http://blog.d2okkk.net/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="bgp" scheme="http://blog.d2okkk.net/tags/bgp/"/>
    
    <category term="irr" scheme="http://blog.d2okkk.net/tags/irr/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7开局配置记录</title>
    <link href="http://blog.d2okkk.net/201709/centos-init/"/>
    <id>http://blog.d2okkk.net/201709/centos-init/</id>
    <published>2017-09-14T08:27:00.000Z</published>
    <updated>2017-09-14T09:34:18.658Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下我自己用的CentOS 7的开局配置。</p><p>查看CentOS版本，修改主机名、修改时区、升级到最新发行版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/redhat-release </span><br><span class="line">hostnamectl --static set-hostname D2O-VPS</span><br><span class="line">rm -f /etc/localtime</span><br><span class="line">ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">yum update</span><br></pre></td></tr></table></figure> <a id="more"></a><p>CentOS7默认没有ifconfig nslookup等工具，安装之。用回iptables代替默认的firewalld。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bind-utils net-tools htop mlocate initscripts.x86_64 </span><br><span class="line">updatedb</span><br><span class="line">systemctl stop firewalld </span><br><span class="line">systemctl mask firewalld </span><br><span class="line">yum install -y iptables-services policycoreutils </span><br><span class="line">systemctl <span class="built_in">enable</span> iptables </span><br><span class="line">systemctl <span class="built_in">enable</span> ip6tables</span><br><span class="line">systemctl start iptables </span><br><span class="line">systemctl start ip6tables</span><br></pre></td></tr></table></figure><p>关闭selinux</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br><span class="line"> SELINUX=disabled</span><br><span class="line"> </span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure><p>修改ssh端口，修改ssh超时自动登出时间，开放ssh防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config </span><br><span class="line"> Port xx22</span><br><span class="line">vi /etc/profile</span><br><span class="line"> <span class="built_in">export</span> TMOUT=0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport xx22 -j ACCEPT</span><br><span class="line">service iptables save</span><br></pre></td></tr></table></figure><p>开启iptables转发，开启内核转发，关闭rp_filter。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -I FORWARD -j ACCEPT</span><br><span class="line">service iptables save</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf </span><br><span class="line"> net.ipv4.ip_forward = 1 </span><br><span class="line"> net.ipv6.conf.all.forwarding = 1 </span><br><span class="line"> net.ipv4.conf.default.rp_filter = 0 </span><br><span class="line"> net.ipv4.conf.all.rp_filter = 0</span><br><span class="line"> </span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>导入epel源，安装htop snmp等常用工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y htop net-snmp</span><br></pre></td></tr></table></figure><p>配置snmp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~ </span><br><span class="line"> mv /etc/snmp/snmpd.conf /etc/snmp/snmpd.conf.bak </span><br><span class="line"> vi /etc/snmp/snmpd.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> com2sec notConfigUser default d2o</span><br><span class="line"> group notConfigGroup v1 notConfigUser </span><br><span class="line"> group notConfigGroup v2c notConfigUser</span><br><span class="line"></span><br><span class="line"> view systemview included .1.3.6.1.2.1.1 </span><br><span class="line"> view systemview included .1.3.6.1.2.1.25.1.1</span><br><span class="line"></span><br><span class="line"> access notConfigGroup <span class="string">&quot;&quot;</span> any noauth exact all none none</span><br><span class="line"></span><br><span class="line"> view all included .1 80</span><br><span class="line"></span><br><span class="line"> syslocation HongKong </span><br><span class="line"> syscontact D2O</span><br><span class="line"></span><br><span class="line"> dontLogTCPWrappersConnects yes</span><br><span class="line"></span><br><span class="line"> extend .1.3.6.1.4.1.2021.54 active_connects /bin/cat /proc/sys/net/netfilter/nf_conntrack_count </span><br><span class="line"> extend .1.3.6.1.4.1.2021.55 Route /bin/sh /etc/snmp/route_prefixes.sh</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> snmpd</span><br><span class="line">systemctl start snmpd</span><br><span class="line">iptables -I INPUT -p udp -m udp --dport 161 -j ACCEPT </span><br><span class="line">service iptables save</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="http://blog.csdn.net/conupefox/article/details/49369035">http://blog.csdn.net/conupefox/article/details/49369035</a><br><a href="http://www.jb51.net/article/106385.htm">http://www.jb51.net/article/106385.htm</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录一下我自己用的CentOS 7的开局配置。&lt;/p&gt;
&lt;p&gt;查看CentOS版本，修改主机名、修改时区、升级到最新发行版&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat /etc/redhat-release &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hostnamectl --static set-hostname D2O-VPS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -f /etc/localtime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum update&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="系统" scheme="http://blog.d2okkk.net/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="linux" scheme="http://blog.d2okkk.net/tags/linux/"/>
    
    <category term="centos" scheme="http://blog.d2okkk.net/tags/centos/"/>
    
  </entry>
  
</feed>
